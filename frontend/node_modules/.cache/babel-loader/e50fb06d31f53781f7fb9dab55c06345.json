{"ast":null,"code":"import axios from 'axios';\n\n// Like/unlike a post\nexport const likePost = async (postId, token) => {\n  const response = await axios.post(`${API_URL}/posts/${postId}/like`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Increment view count\nexport const incrementView = async postId => {\n  const response = await axios.post(`${API_URL}/posts/${postId}/view`);\n  return response.data;\n};\nconst API_URL = 'http://localhost:5000/api'; // Adjust the URL as needed\n\n// Auth API calls\nexport const registerUser = async userData => {\n  const response = await axios.post(`${API_URL}/auth/register`, userData);\n  return response.data;\n};\nexport const loginUser = async credentials => {\n  const response = await axios.post(`${API_URL}/auth/login`, credentials);\n  return response.data;\n};\n\n// Blog Post API calls\nexport const fetchPosts = async () => {\n  const response = await axios.get(`${API_URL}/posts`);\n  return response.data;\n};\nexport const fetchPostById = async postId => {\n  const response = await axios.get(`${API_URL}/posts/${postId}`);\n  return response.data;\n};\nexport const createPost = async (postData, token) => {\n  // If postData is FormData, send as multipart, else send as JSON\n  let config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  if (postData instanceof FormData) {\n    config.headers['Content-Type'] = 'multipart/form-data';\n    const response = await axios.post(`${API_URL}/posts`, postData, config);\n    return response.data;\n  } else {\n    config.headers['Content-Type'] = 'application/json';\n    const response = await axios.post(`${API_URL}/posts`, postData, config);\n    return response.data;\n  }\n};\nexport const updatePost = async (postId, postData, token) => {\n  let config = {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  };\n  if (postData instanceof FormData) {\n    config.headers['Content-Type'] = 'multipart/form-data';\n    const response = await axios.put(`${API_URL}/posts/${postId}`, postData, config);\n    return response.data;\n  } else {\n    config.headers['Content-Type'] = 'application/json';\n    const response = await axios.put(`${API_URL}/posts/${postId}`, postData, config);\n    return response.data;\n  }\n};\nexport const deletePost = async (postId, token) => {\n  const response = await axios.delete(`${API_URL}/posts/${postId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nexport async function getPost(id) {\n  const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\n  return response.data;\n}\n// ...existing code...\n\n// Profile API calls\nexport const fetchUserProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await axios.get(`${API_URL}/profiles/me`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","likePost","postId","token","response","post","API_URL","headers","Authorization","data","incrementView","registerUser","userData","loginUser","credentials","fetchPosts","get","fetchPostById","createPost","postData","config","FormData","updatePost","put","deletePost","delete","getPost","id","fetchUserProfile","localStorage","getItem"],"sources":["C:/Users/shiva/Desktop/blog-platform/frontend/src/utils/api.js"],"sourcesContent":["\nimport axios from 'axios';\n\n// Like/unlike a post\nexport const likePost = async (postId, token) => {\n    const response = await axios.post(`${API_URL}/posts/${postId}/like`, {}, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\n// Increment view count\nexport const incrementView = async (postId) => {\n    const response = await axios.post(`${API_URL}/posts/${postId}/view`);\n    return response.data;\n};\n\nconst API_URL = 'http://localhost:5000/api'; // Adjust the URL as needed\n\n// Auth API calls\nexport const registerUser = async (userData) => {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    return response.data;\n};\n\nexport const loginUser = async (credentials) => {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    return response.data;\n};\n\n// Blog Post API calls\nexport const fetchPosts = async () => {\n    const response = await axios.get(`${API_URL}/posts`);\n    return response.data;\n};\n\nexport const fetchPostById = async (postId) => {\n    const response = await axios.get(`${API_URL}/posts/${postId}`);\n    return response.data;\n};\n\nexport const createPost = async (postData, token) => {\n    // If postData is FormData, send as multipart, else send as JSON\n    let config = {\n        headers: {\n            Authorization: `Bearer ${token}`\n        }\n    };\n    if (postData instanceof FormData) {\n        config.headers['Content-Type'] = 'multipart/form-data';\n        const response = await axios.post(`${API_URL}/posts`, postData, config);\n        return response.data;\n    } else {\n        config.headers['Content-Type'] = 'application/json';\n        const response = await axios.post(`${API_URL}/posts`, postData, config);\n        return response.data;\n    }\n};\n\nexport const updatePost = async (postId, postData, token) => {\n    let config = {\n        headers: {\n            Authorization: `Bearer ${token}`\n        }\n    };\n    if (postData instanceof FormData) {\n        config.headers['Content-Type'] = 'multipart/form-data';\n        const response = await axios.put(`${API_URL}/posts/${postId}`, postData, config);\n        return response.data;\n    } else {\n        config.headers['Content-Type'] = 'application/json';\n        const response = await axios.put(`${API_URL}/posts/${postId}`, postData, config);\n        return response.data;\n    }\n};\n\nexport const deletePost = async (postId, token) => {\n    const response = await axios.delete(`${API_URL}/posts/${postId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\n\nexport async function getPost(id) {\n  const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\n  return response.data;\n}\n// ...existing code...\n\n// Profile API calls\nexport const fetchUserProfile = async () => {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/profiles/me`, {\n        headers: { Authorization: `Bearer ${token}` }\n    });\n    return response.data;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}