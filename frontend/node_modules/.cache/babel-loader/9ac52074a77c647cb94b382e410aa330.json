{"ast":null,"code":"import axios from 'axios';\n\n// Like/unlike a post\nexport const likePost = async (postId, token) => {\n  const response = await axios.post(`${API_URL}/posts/${postId}/like`, {}, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\n\n// Increment view count\nexport const incrementView = async postId => {\n  const response = await axios.post(`${API_URL}/posts/${postId}/view`);\n  return response.data;\n};\nconst API_URL = 'http://localhost:5000/api'; // Adjust the URL as needed\n\n// Auth API calls\nexport const registerUser = async userData => {\n  const response = await axios.post(`${API_URL}/auth/register`, userData);\n  return response.data;\n};\nexport const loginUser = async credentials => {\n  const response = await axios.post(`${API_URL}/auth/login`, credentials);\n  return response.data;\n};\n\n// Blog Post API calls\nexport const fetchPosts = async () => {\n  const response = await axios.get(`${API_URL}/posts`);\n  return response.data;\n};\nexport const fetchPostById = async postId => {\n  const response = await axios.get(`${API_URL}/posts/${postId}`);\n  return response.data;\n};\nexport const createPost = async (postData, token) => {\n  // If image is present, use FormData, else send JSON\n  if (postData.image) {\n    const formData = new FormData();\n    formData.append('title', postData.title);\n    formData.append('content', postData.content);\n    formData.append('tags', JSON.stringify(postData.tags));\n    formData.append('image', postData.image);\n    const response = await axios.post(`${API_URL}/posts`, formData, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } else {\n    const response = await axios.post(`${API_URL}/posts`, {\n      title: postData.title,\n      content: postData.content,\n      tags: postData.tags\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  }\n};\nexport const updatePost = async (postId, postData, token) => {\n  const response = await axios.put(`${API_URL}/posts/${postId}`, postData, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nexport const deletePost = async (postId, token) => {\n  const response = await axios.delete(`${API_URL}/posts/${postId}`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};\nexport async function getPost(id) {\n  const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\n  return response.data;\n}\n// ...existing code...\n\n// Profile API calls\nexport const fetchUserProfile = async () => {\n  const token = localStorage.getItem('token');\n  const response = await axios.get(`${API_URL}/profiles/me`, {\n    headers: {\n      Authorization: `Bearer ${token}`\n    }\n  });\n  return response.data;\n};","map":{"version":3,"names":["axios","likePost","postId","token","response","post","API_URL","headers","Authorization","data","incrementView","registerUser","userData","loginUser","credentials","fetchPosts","get","fetchPostById","createPost","postData","image","formData","FormData","append","title","content","JSON","stringify","tags","updatePost","put","deletePost","delete","getPost","id","fetchUserProfile","localStorage","getItem"],"sources":["C:/Users/shiva/Desktop/blog-platform/frontend/src/utils/api.js"],"sourcesContent":["\nimport axios from 'axios';\n\n// Like/unlike a post\nexport const likePost = async (postId, token) => {\n    const response = await axios.post(`${API_URL}/posts/${postId}/like`, {}, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\n// Increment view count\nexport const incrementView = async (postId) => {\n    const response = await axios.post(`${API_URL}/posts/${postId}/view`);\n    return response.data;\n};\n\nconst API_URL = 'http://localhost:5000/api'; // Adjust the URL as needed\n\n// Auth API calls\nexport const registerUser = async (userData) => {\n    const response = await axios.post(`${API_URL}/auth/register`, userData);\n    return response.data;\n};\n\nexport const loginUser = async (credentials) => {\n    const response = await axios.post(`${API_URL}/auth/login`, credentials);\n    return response.data;\n};\n\n// Blog Post API calls\nexport const fetchPosts = async () => {\n    const response = await axios.get(`${API_URL}/posts`);\n    return response.data;\n};\n\nexport const fetchPostById = async (postId) => {\n    const response = await axios.get(`${API_URL}/posts/${postId}`);\n    return response.data;\n};\n\nexport const createPost = async (postData, token) => {\n    // If image is present, use FormData, else send JSON\n    if (postData.image) {\n        const formData = new FormData();\n        formData.append('title', postData.title);\n        formData.append('content', postData.content);\n        formData.append('tags', JSON.stringify(postData.tags));\n        formData.append('image', postData.image);\n        const response = await axios.post(`${API_URL}/posts`, formData, {\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        return response.data;\n    } else {\n        const response = await axios.post(`${API_URL}/posts`, {\n            title: postData.title,\n            content: postData.content,\n            tags: postData.tags\n        }, {\n            headers: {\n                Authorization: `Bearer ${token}`,\n                'Content-Type': 'application/json',\n            },\n        });\n        return response.data;\n    }\n};\n\nexport const updatePost = async (postId, postData, token) => {\n    const response = await axios.put(`${API_URL}/posts/${postId}`, postData, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\nexport const deletePost = async (postId, token) => {\n    const response = await axios.delete(`${API_URL}/posts/${postId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n    });\n    return response.data;\n};\n\n\nexport async function getPost(id) {\n  const response = await axios.get(`http://localhost:5000/api/posts/${id}`);\n  return response.data;\n}\n// ...existing code...\n\n// Profile API calls\nexport const fetchUserProfile = async () => {\n    const token = localStorage.getItem('token');\n    const response = await axios.get(`${API_URL}/profiles/me`, {\n        headers: { Authorization: `Bearer ${token}` }\n    });\n    return response.data;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}